---
layout: post
title:  "Part 1 - Using Gems"
date:   2016-08-27 11:08:39 +1200
---

1. [What are Gems?](#what-are-gems)
2. [Using the Gem](#using-the-gem)
3. [Loading text from files](#loading-text-from-files)
4. [Analysing the text](#analysing-the-text)
5. [Running the program](#running-the-program)
6. [Adding more to the program](#adding-more-to-the-program)
7. [DRY Code](#dry-code)

# What are Gems?

Gems (also called _libraries_ in many other programming languages), are pieces of code other people have written and published for reuse. Much of software development involves building on top of these. While it is entirely possible to write sophisticated apps completely from scratch, using Gems saves development time. It also prevents many security and performance issues that result from developers not entirely understanding what they're writing.

Today we're going to be using a Gem called "[Sentimental][sentimental]". This Gem allows us to pass it some text that it will analyse and tell us the overall mood or sentiment.

To start with, let's create a _Gemfile_. This is a special file that describes which Gems and which version of those Gems we want to use in our project. Create an empty directory called `mood-analyser`

Hint: in these examples the lines starting with a `$` are what you type in to a console window (without the `$`), the ones without are what you should expect to see in response.

```
$ mkdir mood-analyzer
$ cd mood-analyzer
```

Then run `bundle init`

```
$ bundle init
Writing new Gemfile to /Users/megan/Code/mood-analyser/Gemfile
```

Open up the created Gemfile in your text editor and you should see something similar to this:

{% highlight ruby %}
# A sample Gemfile
source "https://rubygems.org"

# gem "rails"
{% endhighlight %}

You can go ahead and remove that `gem "rails"` line and add in its place `gem "sentimental"`

{% highlight ruby %}
source "https://rubygems.org"

gem "sentimental"
{% endhighlight %}

Finally run `bundle install` to install the gem we have specified.

```
$ bundle install
Fetching gem metadata from https://rubygems.org/
Fetching version metadata from https://rubygems.org/
Using json 1.8.3
Using bundler 1.12.5
Installing sentimental 1.4.0
Bundle complete! 1 Gemfile dependency, 3 gems now installed.
Use `bundle show [gemname]` to see where a bundled gem is installed.
```

# Using the Gem

We're going to start off by analysing two pieces of public domain texts, you can find them [here][file1] and [here][file2] (you may recognise them). Save them in to the same directory as your newly created Gemfile.

Then create a new file in the directory called `mood_analyser.rb`.

In `mood_analyser.rb` we're going to add the following line:

{% highlight ruby %}
require "sentimental"
{% endhighlight %}

Unlike when using Ruby on Rails, which automatically loads any Gems in a Gemfile, vanilla Ruby requires us to manually specify which Gems we want to use. The `require` function is a built-in function that loads codes from the name passed to it.

# Loading text from files

After we've loaded the Gem, we need to load the text from the documents we downloaded. To do so we tell Ruby to `open` the files then `read` from them. Both of these are built-in:

{% highlight ruby %}
require "sentimental"

text_file = open "1342.txt"
text = text_file.read
{% endhighlight %}

What we're doing here is using the built-in function of Ruby `open`, and giving it a filename to open. This gives us an _object_ or _instance_ we can then call `read` on to read all the text from the file.

It is possible to chain these lines together but for clarity's sake, let's keep them separate.

# Analysing the text

Now that we've loaded all the text we can use the Sentimental Gem to analyse it. To do so, we follow the usage instructions from the Gem's [GitHub page][sentimental]:

{% highlight ruby %}
require "sentimental"

text_file = open "1342.txt"
text = text_file.read

analyser = Sentimental.new
analyser.load_defaults

sentiment = analyser.sentiment text
puts sentiment
{% endhighlight %}

These four lines create a new instance of the `Sentimental` class provided by the Gem. We then load a default sentiment dictionary (it defines whether each term is considered positive or negative), analyse the text by passing it to the `sentiment` function, and finally print out the result of our analysis.

`puts` is another built-in function like `open` that simply prints whatever you pass it out in a terminal window.

# Running the program

To run the program we have just written we simply need to enter in to our terminal window (make sure you are in the right directory!):

```
$ ruby mood_analyser.rb
```

This will spit out either `positive`, `negative` or `neutral` depending on what the analyser thinks of the text.

# Adding more to the program

We can now add some more lines of code to analyse the other piece of text and see if we get a different result.

{% highlight ruby %}
require "sentimental"

text_file = open "1342.txt"
text = text_file.read

analyser = Sentimental.new
analyser.load_defaults

sentiment = analyser.sentiment text
puts sentiment

text_file = open "17192.txt"
text = text_file.read

sentiment = analyser.sentiment text
puts sentiment
{% endhighlight %}

Run this again and you should see a second line of output with a different result.

# DRY code

Now at this point you may be noticing that we're repeating some lines of code and only changing them slightly or not at all. This is where one of the most important principles of software development comes in: DRY or "Don't Repeat Yourself", also know as "Once and Only Once".

The idea is that we should be _refactoring_ to remove duplicated code. This adds clarity and stops the complexity from spiraling out of control in larger projects.

In our situation the best thing to do is for us to define our own function we can reuse. We want to give this a good name so it's clear what it should do:

{% highlight ruby %}
require "sentimental"

def analyse_file
end

text_file = open "1342.txt"
text = text_file.read

analyser = Sentimental.new
analyser.load_defaults

sentiment = analyser.sentiment text
puts sentiment

text_file = open "17192.txt"
text = text_file.read

sentiment = analyser.sentiment text
puts sentiment
{% endhighlight %}

We then decide what parameters it should accept. In our situation we can see the only thing that's changing is the file name and we're also reusing the analyser for each file.

{% highlight ruby %}
require "sentimental"

def analyse_file(file_name, analyser)
end

text_file = open "1342.txt"
text = text_file.read

analyser = Sentimental.new
analyser.load_defaults

sentiment = analyser.sentiment text
puts sentiment

text_file = open "17192.txt"
text = text_file.read

sentiment = analyser.sentiment text
puts sentiment
{% endhighlight %}

Adding the body of the function should be fairly self evident:

{% highlight ruby %}
require "sentimental"

def analyse_file(file_name, analyser)
  text_file = open file_name
  text = text_file.read

  analyser.sentiment text
end

text_file = open "1342.txt"
text = text_file.read

analyser = Sentimental.new
analyser.load_defaults

sentiment = analyser.sentiment text
puts sentiment

text_file = open "17192.txt"
text = text_file.read

sentiment = analyser.sentiment text
puts sentiment
{% endhighlight %}

Ruby has what is called _implicit return_. This means that the result of the last line of a function is what the function returns to whoever called it.

Now we can _refactor_ our program to use our new function:

{% highlight ruby %}
require "sentimental"

def analyse_file(file_name, analyser)
  text_file = open file_name
  text = text_file.read

  analyser.sentiment text
end

analyser = Sentimental.new
analyser.load_defaults

puts analyse_file "1342.txt", analyser
puts analyse_file "17192.txt", analyser
{% endhighlight %}

Our program looks a lot clearer and shorter now! Run it again to make sure it's still working.

Try the program out with your own text or from elsewhere. [Project Gutenburg](https://www.gutenberg.org/) has a tonne of public domain works available for free. Be aware that larger files may cause you program to crash.

## [Move on to part 2]({{site.baseurl}}{{page.next.url}})

[sentimental]: https://github.com/7compass/sentimental
[file1]: {{site.github.url}}/txt/1342.txt
[file2]: {{site.github.url}}/txt/17192.txt
